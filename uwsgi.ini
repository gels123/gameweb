# uwsgi使用配置文件启动，配置如下
#uwsgi --http 0.0.0.0:8001/ --file gameweb/wsgi.py --static-map=/static=static
[uwsgi]
#项目目录
chdir=/home/share/work/gameweb
#指定项目application
#module = gameweb.wsgi
wsgi-file = /home/share/work/gameweb/gameweb/wsgi.py
# 加载一个WSGI模块,这里加载gameweb/wsgi.py这个模块
socket = /home/share/work/gameweb/uwsgi.sock
#socket=0.0.0.0:8001
#指定socket文件，也可以指定为127.0.0.1:8001，这样就会监听到网络套接字
#指定ip及端口（配置nginx就不需要单独启动uwsgi需要填写）
#http=0.0.0.0:8001
# 进程个数（processess一样效果）
workers=2
#指定启动时的pid文件路径
pidfile = /home/share/work/gameweb/uwsgi.pid

#指定静态文件（配置nginx不需要，单独启动uwsgi加载静态文件）
static-map=/static=/home/share/work/gameweb/static
#启动uwsgi的用户名和用户组
uid=root
gid=root
#启用主进程
master=true
log-master=true
# 启用线程
enable-threads=true
#自动移除unix Socket和pid文件当服务停止的时候
vacuum=true
#设置日志目录
daemonize=/home/share/work/gameweb/log/uwsgi.log
#不记录信息日志，只记录错误以及uwsgi内部消息
disable-logging=true
# 序列化接受的内容，如果可能的话
thunder-lock=true

py-autoreload=1
#监控python模块mtime来触发重载 (只在开发时使用)

lazy-apps=true
#在每个worker而不是master中加载应用

buffer-size=65535
#设置用于uwsgi包解析的内部缓存区大小为64k。默认是4k。

log-maxsize=5000000
#设置最大日志文件大小

reload-mercy = 8
#设置在平滑的重启（直到接收到的请求处理完才重启）一个工作子进程中，等待这个工作结束的最长秒数。这个配置会使在平滑地重启工作子进程中，如果工作进程结束时间超过了8秒就会被强行结束（忽略之前已经接收到的请求而直接结束）

max-requests = 5000
#为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被回收重用（重启）。你可以使用这个选项来默默地对抗内存泄漏

limit-as = 256
#通过使用POSIX/UNIX的setrlimit()函数来限制每个uWSGI进程的虚拟内存使用数。这个配置会限制uWSGI的进程占用虚拟内存不超过256M。如果虚拟内存已经达到256M，并继续申请虚拟内存则会使程序报内存错误，本次的http请求将返回500错误。

harakiri = 60
#一个请求花费的时间超过了这个harakiri超时时间，那么这个请求都会被丢弃，并且当前处理这个请求的工作进程会被回收再利用（即重启）